<project name="KoLmafia" default="debug" basedir=".">

	<!-- ========================================== -->
	<!--  set the global properties for this build  -->
	<!-- ========================================== -->

	<property file="build.properties" />
	<property file="default.properties" />
	<property environment="env" />

	<available file=".svn" property="using.svn" />
	<available file=".git" property="using.gitsvn" />

	<!-- ========================================== -->
	<!--  create directories used by other targets  -->
	<!-- ========================================== -->

	<target name="init">

		<tstamp />
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />
        <mkdir dir="${test-output}" />

	</target>

	<!-- ================================== -->
	<!--  update files from the repository  -->
	<!-- ================================== -->

	<target name="update">

		<exec executable="svn" failifexecutionfails="false">
			<arg value="update" />
			<arg value="${root}" />
		</exec>

	</target>

	<!-- ================================================== -->
	<!--  guesses the SVN revision of the local repository  -->
	<!-- ================================================== -->

	<target name="version" depends="svn-version,gitsvn-version" if="revision">

		<echo message="Current revision: ${revision}" />

		<replace
			file="${KoLConstants}"
			token="REVISION = null"
			value="REVISION = &quot;${revision}&quot;" />

	</target>

	<!-- ========================================== -->
	<!--  get SVN revision number using svnversion  -->
	<!-- ========================================== -->

	<target name="svn-version" if="using.svn">

		<exec executable="svnversion" outputproperty="revision" failifexecutionfails="false">
			<arg value="-n" />
			<arg value="${root}" />
		</exec>

	</target>

	<!-- ============================================ -->
	<!--  get SVN revision number using git find-rev  -->
	<!-- ============================================ -->

	<target name="gitsvn-version" if="using.gitsvn">

		<exec executable="sh" outputproperty="revision" failifexecutionfails="false">
			<arg value="-c" />
			<arg value="git svn info | grep '^Revision: [0-9]*$' | awk '{ print $2 }'" />
		</exec>

	</target>

	<!-- ======================================================== -->
	<!--  reverts any changes involved with setting the revision  -->
	<!-- ======================================================== -->

	<target name="unversion" depends="svn-version,gitsvn-version" if="revision">

		<replace
			file="${KoLConstants}"
			token="REVISION = &quot;${revision}&quot;"
			value="REVISION = null" />

	</target>

	<!-- ======================= -->
	<!--  clean up object files  -->
	<!-- ======================= -->

	<target name="clean">

		<!--
		Really important not to follow the symlink to
		/Applications and delete it...
		-->

		<symlink action="delete" link="${dist}/${version-name}/Applications" failonerror="false" />

		<delete dir="${appfile}" failonerror="false" />

		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${build}" defaultexcludes="no" followsymlinks="true" includes="**/*" />
			<fileset dir="${docs}" defaultexcludes="no" followsymlinks="true" includes="**/*" />
			<fileset dir="${dist}" defaultexcludes="no" followsymlinks="true" includes="*.jar" />
			<fileset dir="${dist}" defaultexcludes="no" followsymlinks="true" includes="*.tar.gz" />
			<fileset dir="${dist}" defaultexcludes="no" followsymlinks="true" includes="*.exe" />
			<fileset dir="${dist}" defaultexcludes="no" followsymlinks="true" includes="*.deb" />
		</delete>

	</target>

	<!-- ================================ -->
	<!--  clean up KoLmafia object files  -->
	<!-- ================================ -->

	<target name="start">

		<delete dir="${build}/net/sourceforge/kolmafia" failonerror="false" />
		<delete dir="${docs}" failonerror="false" />
		<delete dir="${appfile}" failonerror="false" />

		<delete failonerror="false">
			<fileset dir="${dist}">
				<include name="${ant.project.name}*" />
			</fileset>
		</delete>

		<antcall target="init" />

	</target>

	<!-- ====================== -->
	<!--  generate class files  -->
	<!-- ====================== -->

	<target name="compile" depends="init">

		<javac
			compiler="modern"
			source="1.5"
			target="1.5"
			srcdir="${lib}"
			destdir="${build}"
			classpath="${build}"
			failonerror="false"
			debug="on"
			debuglevel="lines,vars,source"
			deprecation="off"
			nowarn="on"
			includeantruntime="false"
			errorProperty="compile.failed" />

		<fail if="compile.failed" message="Failed to compile third-party libraries" />

		<copy todir="${build}" preservelastmodified="true">
			<fileset dir="${lib}">
				<exclude name="**/*.jar" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>

		<antcall target="version" />

		<javac
			compiler="modern"
			source="1.5"
			target="1.5"
			srcdir="${src}"
			destdir="${build}"
			classpath="${build}"
			failonerror="false"
			debug="on"
			debuglevel="lines,vars,source"
			deprecation="off"
			nowarn="on"
			includeantruntime="false"
			errorProperty="compile.failed" />

		<antcall target="unversion" />

		<fail if="compile.failed" message="Failed to compile KoLmafia source code" />

		<copy todir="${build}" preservelastmodified="true">
			<fileset dir="${src}">
				<exclude name="**/*.jar" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>

	</target>


    <!-- ======================================== -->
    <!--  generate class files for the unittests  -->
    <!-- ======================================== -->

    <target name="compile-test" depends="init">

        <javac
                compiler="modern"
                source="1.5"
                target="1.5"
                srcdir="${test}"
                destdir="${build}"
                failonerror="false"
                debug="on"
                debuglevel="lines,vars,source"
                deprecation="off"
                nowarn="on"
                includeantruntime="false"
                errorProperty="compile.failed">
            <classpath>
                <pathelement path="${build}/"/>
                <fileset dir="${test-utils}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>

        <fail if="compile.failed" message="Failed to compile unit tests" />

        <copy todir="${build}" preservelastmodified="true">
            <fileset dir="${lib}">
                <exclude name="**/*.jar" />
                <exclude name="**/*.java" />
            </fileset>
        </copy>

    </target>

    <!-- ===================== -->
    <!--  runs the unit tests  -->
    <!-- ===================== -->

    <target name="test" depends="compile,compile-test" description="runs junit tests">
        <junit printsummary="yes" haltonfailure="no" showoutput="no">
            <classpath>
                <pathelement path="${build}"/>
                <fileset dir="${test-utils}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>

            <batchtest fork="yes" todir="${test-output}">
                <formatter type="xml"/>
                <fileset dir="${test}">
                    <include name="**/*Test*.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

	<!-- ========================================== -->
	<!--  generate a zipped TAR of the source code  -->
	<!-- ========================================== -->

	<target name="tar" depends="init">

		<tar destfile="${tarfile}" basedir="${root}" compression="gzip">
			<exclude name="build/**" />
			<exclude name="dist/**" />
		</tar>

	</target>

	<!-- =========================== -->
	<!--  generate the standard JAR  -->
	<!-- =========================== -->

	<target name="jar" depends="compile">

		<jar
			destfile="${jarfile}"
			basedir="${build}"
			update="true"
			index="true"
			compress="true">

			<manifest>
				<attribute name="Main-Class" value="${main}" />
			</manifest>
		</jar>

	</target>

	<!-- =========================== -->
	<!--  generate the standard EXE  -->
	<!-- =========================== -->

	<target name="jsmooth" depends="init,update,jar">

		<copy file="${win.jsmoothfile}" tofile="${win.tmp.jsmoothfile}" />
		<replace file="${win.tmp.jsmoothfile}" token="dist/KoLmafia.exe" value="${exefile}" />
		<replace file="${win.tmp.jsmoothfile}" token="dist/KoLmafia.jar" value="${jarfile}" />

		<taskdef name="jsmooth" classname="net.charabia.jsmoothgen.ant.JSmoothGen" classpath="${util}/windows/jsmoothgen-ant.jar" />

		<jsmooth project="${win.tmp.jsmoothfile}" skeletonroot="${util}/windows/skeletons" />
        <delete file="${win.tmp.jsmoothfile}" />

	</target>

	<!-- ================================ -->
	<!--  generate an application bundle  -->
	<!-- ================================ -->

	<target name="jarbundler" depends="init,update,jar">

		<taskdef name="jarbundler" classname="net.sourceforge.jarbundler.JarBundler" classpath="${util}/macosx/${mac.jarbundlerjar}" />
		<jarbundler dir="${dist}" name="${version-name}" mainclass="${main}" jar="${jarfile}" icon="${mac.icon}" vmoptions="${mac.vmoptions}" />

	</target>

	<!-- ========================== -->
	<!--  create an OSX disk image  -->
	<!-- ========================== -->

	<target name="dmg" depends="init,update,jar,jarbundler">

		<mkdir dir="${dist}/${version-name}" />

		<symlink action="single" link="${dist}/${version-name}" resource="/Applications" failonerror="false" />
		<exec executable="cp" dir="${dist}">
			<arg line="-a ${basedir}/${appfile} ${basedir}/${dist}/${version-name}/" />
		</exec>

	        <delete file="${basedir}/${dmgfile}" />
		<exec executable="hdiutil" dir="${dist}">
			<arg line="create ${basedir}/${dmgfile} -srcfolder ${basedir}/${dist}/${version-name} -volname ${version-name}" />
		</exec>

		<exec executable="rm" dir="${dist}">
			<arg line="-rf ${ant.project.name}*" />
		</exec>
	</target>

	<!-- ========================== -->
	<!--  create a Debian package   -->
	<!-- ========================== -->

	<target name="debian" depends="init,update,version,jar,desktop">

		<taskdef name="deb" classname="com.googlecode.ant_deb_task.Deb" classpath="${util}/debian/ant-deb.jar" />

		<deb todir="${dist}" package="kolmafia" priority="optional" section="games" depends="sun-java6-jre">
			<version upstream="${revision}" debian="${revision}" />
			<maintainer name="Veracity" email="veracity@hambo.com" />
			<description synopsis="${version.synopsis}">${version.synopsis}</description>
			<tarfileset file="${jarfile}" prefix="usr/lib" filemode="755" />
			<tarfileset file="${build}/kolmafia.desktop" prefix="usr/share/applications" />
			<tarfileset file="util/debian/kol.xpm" prefix="usr/share/pixmaps" />
			<tarfileset file="util/debian/kol" prefix="usr/bin" filemode="755" />
		</deb>

	</target>

	<!-- ============================= -->
	<!--  create Debian desktop entry  -->
	<!-- ============================= -->

	<target name="desktop">

		<taskdef name="desktopentry" classname="com.googlecode.ant_deb_task.DesktopEntry" classpath="${util}/debian/ant-deb.jar" />

		<desktopentry toFile="build/kolmafia.desktop" name="${ant.project.name}" comment="${version.synopsis}" exec="/usr/bin/kol" icon="kol.xpm" terminal="false" type="Application" categories="Game;RolePlaying" />

	</target>

	<!-- ================================ -->
	<!--  generate the alpha testing JAR  -->
	<!-- ================================ -->

	<target name="debug" depends="start,version">

		<replace
			file="${KoLConstants}"
			token="RELEASED = true"
			value="RELEASED = false" />

		<antcall target="jar" />

		<replace
			file="${KoLConstants}"
			token="RELEASED = false"
			value="RELEASED = true" />

	</target>

	<!-- ============================ -->
	<!--  generate a daily build JAR  -->
	<!-- ============================ -->

	<target name="daily" depends="clean,init,update,version">

		<replace
			file="${KoLConstants}"
			token="REVISION = null"
			value="REVISION = &quot;${revision}&quot;" />

		<replace
			file="${KoLConstants}"
			token="RELEASED = true"
			value="RELEASED = false" />

		<antcall target="compile" />

		<replace
			file="${KoLConstants}"
			token="REVISION = &quot;${revision}&quot;"
			value="REVISION = null" />

		<replace
			file="${KoLConstants}"
			token="RELEASED = false"
			value="RELEASED = true" />

		<jar
			destfile="${dist}/${ant.project.name}-${revision}.jar"
			basedir="${build}"
			update="true"
			index="true"
			compress="true">

			<manifest>
				<attribute name="Main-Class" value="${main}" />
			</manifest>
		</jar>

	</target>

	<!-- =========================== -->
	<!--  update KoLConstants.java   -->
	<!-- =========================== -->

	<target name="set.dist.properties">

		<replaceregexp
			file="${KoLConstants}"
			match="${version.date.pattern}"
			replace="${version.date}" />

		<replaceregexp
			file="${KoLConstants}"
			match="${version.name.pattern}"
			replace="${version.name}" />

		<replaceregexp
			file="${KoLConstants}"
			match="${version.rev.pattern}"
			replace="${version.rev}" />

	</target>

	<!-- =========================== -->
	<!--  generate the distribution  -->
	<!-- =========================== -->

	<target name="dist" depends="clean,init,update,tar,jar,jsmooth,dmg">
	</target>


	<!-- ==================================================== -->
	<!--  runs program with all needed libraries in the path  -->
	<!-- ==================================================== -->

	<target name="exec" depends="compile">
		<java fork="true" classname="${main}" classpath="${build}" dir="${dist}">
			<jvmarg line="${exec.vmoptions}" />
		</java>
	</target>


	<!-- ================================================================= -->
	<!--  runs program with all needed libraries in the path using JRebel  -->
	<!-- ================================================================= -->

	<target name="exec-jrebel" depends="compile">
		<copy
			todir="${build}"
			overwrite="true"
			preservelastmodified="true"
			file="util/rebel.xml" />

		<replaceregexp
			file="${build}/rebel.xml"
			match="kolmafia"
			replace="${basedir}/${build}" />

		<java fork="true" classname="${main}" classpath="${build}" dir="${dist}">
			<jvmarg line="-javaagent:${jrebel.file} ${exec.vmoptions}" />
		</java>
	</target>

	<!-- ============================================= -->
	<!--  generates the release notes for the archive  -->
	<!-- ============================================= -->

	<target name="notes" depends="jar">
		<!--
		Yeah, this looked easy.
		I just have to get ${logfile} to match the ReleaseNotes code...
		Not tonight

		<exec executable="svn" failifexecutionfails="false" output="${logfile}">
			<arg value="log" />
			<arg value="-r" />
			<arg value="${svn.revision.base}:HEAD" />
			<arg value="${root}" />
		</exec>
		-->
		<java fork="true" classname="net.sourceforge.kolmafia.utilities.ReleaseNotes" classpath="${jarfile}" dir="${dist}" />
	</target>

	<!-- ======================================= -->
	<!--  generate the javadocs from sourcecode  -->
	<!-- ======================================= -->

	<target name="javadoc" depends="init">

		<mkdir dir="${docs}" />
		<mkdir dir="${docs}/api" />

		<javadoc sourcepath="${src}" destdir="${docs}" packagenames="*">

			<link href="http://download.oracle.com/javase/1.5.0/docs/api/" />

			<classpath>
				<pathelement location="${lib}" />
				<pathelement location="${build}" />
			</classpath>

		</javadoc>

	</target>

</project>
